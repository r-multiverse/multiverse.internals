% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/record_issues.R
\name{record_issues}
\alias{record_issues}
\title{Record package issues.}
\usage{
record_issues(
  repo = "https://multiverse.r-multiverse.org",
  versions = "versions.json",
  output = "issues",
  mock = NULL
)
}
\arguments{
\item{repo}{Character of length 1, URL of the repository
of R package candidates for production.}

\item{versions}{Character of length 1, file path to a JSON manifest
tracking the history of released versions of packages.
The official versions file for R-multiverse is maintained and
updated periodically at
\url{https://github.com/r-multiverse/checks/blob/main/versions.json}.}

\item{output}{Character of length 1, file path to the folder to record
new package issues. Each call to \code{record_issues()} overwrites the
contents of the repo.}

\item{mock}{For testing purposes only, a named list of data frames
for the \code{mock} argument of each type of check.}
}
\value{
\code{NULL} (invisibly).
}
\description{
Record R-multiverse package issues in compact JSON files.
}
\section{Package checks for production}{

Functions like \code{\link[=check_versions]{check_versions()}} and \code{\link[=check_descriptions]{check_descriptions()}}
perform health checks for all packages in R-multiverse.
Only packages that pass these checks go to the production repository at
\url{https://production.r-multiverse.org}. For a complete list of checks, see
the \verb{check_*()} functions listed at
\url{https://r-multiverse.org/multiverse.internals/reference.html}.
\code{\link[=record_versions]{record_versions()}} updates the version number history
of releases in R-multiverse, and \code{\link[=record_issues]{record_issues()}} gathers
together all the issues about R-multiverse packages.
}

\examples{
  # R-multiverse uses https://multiverse.r-multiverse.org as the repo.
  repo <- "https://wlandau.r-universe.dev" # just for testing and examples
  output <- tempfile()
  versions <- tempfile()
  record_versions(
    versions = versions,
    repo = repo
  )
  record_issues(
    repo = repo,
    versions = versions,
    output = output
  )
  files <- list.files(output)
  print(files)
  package <- head(files, n = 1)
  if (length(package)) {
    print(package)
  }
  if (length(package)) {
    print(readLines(file.path(output, package)))
  }
}
\keyword{check}
\keyword{data}
\keyword{management}
\keyword{package}
