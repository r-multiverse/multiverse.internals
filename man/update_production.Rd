% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/update_production.R
\name{update_production}
\alias{update_production}
\title{Update production}
\usage{
update_production(
  path_production,
  path_community,
  repo_production = "https://production.r-multiverse.org",
  repo_community = "https://community.r-multiverse.org",
  days_notice = 28L,
  mock = NULL
)
}
\arguments{
\item{path_production}{Character string, directory path to the source
files of the production universe.}

\item{path_community}{Character string, directory path to the source
files of the community universe.}

\item{repo_production}{Character string, URL of the production universe.}

\item{repo_community}{Character string, URL of the community universe.}

\item{days_notice}{Integer scalar, number of days between the
detection of a production issue and removal from the production universe.}

\item{mock}{For testing purposes only, a named list of data frames
for inputs to various intermediate functions.}
}
\value{
\code{NULL} (invisibly)
}
\description{
Update the production universe.
}
\details{
\code{\link[=update_production]{update_production()}} controls how packages enter and leave
the production universe. It updates the production \code{packages.json}
manifest depending on the contents of the community
universe and issues with package checks. There are 3 phases:
\enumerate{
\item Demote packages: packages with any check issues in production
are given \code{days_notice} days to fix the problems. If the problems
are fixed on time, then the package stays in
production, and the notice period resets (the next problem is given
the full \code{days_notice} notice period from scratch). Otherwise,
if there are still issues after \code{days_notice} days, then the package
is removed from the \code{packages.json} manifest and added to a special
\code{removing.json} manifest in production. \code{removing.json} ensures
that the builds are actually removed from production before the
package can be promoted again. That way, if the next automatic
promotion fails production checks, no build will be available
to install from \url{https://production.r-multiverse.org}.
\item Clear removals: a demoted package stays in \code{removing.json} until
the builds are removed from \url{https://production.r-multiverse.org}.
After the builds are gone, the package is removed from \code{removing.json}
so it can be promoted again. No build will become available again
until the package passes all production checks.
\item Promote packages: a package in the community universe is moved
to production if:
\itemize{
\item It passes description checks from \code{\link[=issues_descriptions]{issues_descriptions()}}.
\item It passes version checks from \code{\link[=issues_versions]{issues_versions()}}.
\item The package is available to install from
\url{https://community.r-multiverse.org}.
\item The package is not in \code{removing.json}.
To promote the package, an entry is created in the production
\code{packages.json} with the remote SHA of the latest release.
}
}
}
\examples{
url_production = "https://github.com/r-multiverse/production"
url_community = "https://github.com/r-multiverse/community"
path_production <- tempfile()
path_community <- tempfile()
gert::git_clone(url = url_production, path = path_production)
gert::git_clone(url = url_community, path = path_community)
update_production(
  repo_production = "https://production.r-multiverse.org",
  repo_community = "https://community.r-multiverse.org",
  path_production = tempfile(),
  path_community = tempfile(),
  days_notice = 28L
)
}
