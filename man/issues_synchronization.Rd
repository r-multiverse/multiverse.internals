% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/issues_synchronization.R
\name{issues_synchronization}
\alias{issues_synchronization}
\title{Report package check synchronization issues.}
\usage{
issues_synchronization(meta = meta_packages())
}
\arguments{
\item{meta}{Package metadata from \code{\link[=meta_packages]{meta_packages()}}.}
}
\value{
A \code{tibble} with one row per package and the following columns:
\itemize{
\item \code{package}: Name of the package.
\item \code{synchronization}: Synchronization status: \code{"success"} if
the checks are synchronized, \code{"incomplete"} if checks are still
running on R-universe GitHub Actions, and \code{"recent"} if the
package was last published so recently that downstream checks
may not have started yet.
}
}
\description{
Ensure the reported R-universe checks are synchronized.
Report the packages whose checks have not been synchronized.
}
\details{
R-universe automatically rechecks downstream packages
if an upstream dependency increments its version number.
R-multiverse needs to wait for these downstream checks to finish
before it makes decisions about accepting packages into Production.
\code{\link[=issues_synchronization]{issues_synchronization()}} scrapes the GitHub Actions API to find out
if any R-universe checks are still running for a package.
In addition, to give rechecks enough time to post on GitHub Actions,
it flags packages published within the last 5 minutes.
}
\examples{
  \dontrun{
  meta <- meta_packages(repo = "https://wlandau.r-universe.dev")
  issues_synchronization(meta)
  }
}
\seealso{
Other issues: 
\code{\link{issues_advisories}()},
\code{\link{issues_dependencies}()},
\code{\link{issues_licenses}()},
\code{\link{issues_r_cmd_check}()},
\code{\link{issues_remotes}()},
\code{\link{issues_version_conflicts}()},
\code{\link{issues_versions}()}
}
\concept{issues}
